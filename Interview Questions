Q.1 What is cloud computing ? 
Answer : Cloud Computing on demand delivery of compute power ,database, storage,      applications & other IT resources through cloud platform via internet with pay as you go.

Q.2 Deployment Model in Cloud ?
 Answer :
1.	Public Cloud
2.	Private Cloud
3.	Hybrid Cloud
4.	Community Cloud

1.	Public Cloud – 
      As the name, Public cloud is available for all public & resources shared between all users. Public cloud is available to anyone from anywhere via internet.  This computing model is available at the data 
      center which is controlled by Vendors. Example are likes AWS, Azure, GCP
2.	Private Cloud
      Private Cloud is used in particular organization, in which customization is available for single user. It is also known as ‘Internal Cloud’
3.	Hybrid Cloud
     	Hybrid cloud made by two & more deployment models that’s work together to provide user with greater flexibility. The combination of private, public, & community resource provides customers with more option for accessing their data than with just one model alone.
4.	Community Cloud
      It allows systems and services to be accessible by a group of organizations. It is a distributed system that is created by integrating the services of different clouds to address the specific needs of a 
      community, industry, or business. The infrastructure of the community could be shared between the organization which has shared concerns or tasks. It is generally managed by a third party or by the 
      combination of one or more organizations in the community.
   
Q.3 Service Model in Cloud ?
Answer : There is 3 types of Service models in Cloud.
1.	Software as a Service [SaaS] -
      Software as a service vendors host the applications, making them available to users via the internet. With SaaS, businesses don't have to install or download any software to their existing IT 
      infrastructures. SaaS ensures that users are always running the most up-to-date versions of the software. The SaaS provider handles maintenance and support.
2.	Platform as a Service [PaaS] -
      Platform as a service offers developers a platform for software development and deployment over the internet, enabling them to access up-to-date tools. PaaS delivers a framework that developers can use to c     create customized applications. The organization or the PaaS cloud vendor manage the servers, storage and networking, while the developers manage the applications.
3.	Infrastructure as a Service [IaaS] -
      Infrastructure as a service is used by companies that don't want to maintain their own on-premises data centers. IaaS provides virtual computing resources over the Internet. The IaaS cloud vendor hosts 
      the infrastructure components that typically exist in an on-premises data center, including servers, storage and networking hardware, as well as the hypervisor or virtualization layer.

Q.4 Architecture of Cloud Computing ?
Answer : Cloud Computing is the one of the demanding technology of current time. Which is providing Virtualized services as per demand. Starting from small to medium and medium to large, every organization use cloud computing services for storing information and accessing it from anywhere and any time only with the help of internet.
Architecture having 2 parts –
1.	 Frontend -
        As you see in the diagram, frontend of the cloud architecture refers to the client side of cloud computing system. Means it contains all the user interfaces and applications which are used by the 
        client to access the cloud computing services.
 
2.	 Backend : 
        Backend refers to the cloud itself which is used by the service provider. Along with this, it includes huge storage, virtual applications, virtual machines, traffic control mechanisms, deployment 
        models, etc.

 Q.5 AWS Global Infrastructure Count ?
Answer :
1  Launched Regions = 32 (each with multiple AZ’s)
2. Availability Zone = 102
3.  Points of Presence = 550+ (13 Regional Edge caches) 

Q.6 Why do we use region ?
Answer :


Q.7 What is service ? & What are resources ?
Answer : There are various types of services available in AWS & in that services various types of resources.

1. Amazon IAM (Identity and Access Management) for Identities of user and service
2.Amazon EC2 (Elastic Compute Cloud) for virtual server hosting,
3.Amazon S3 (Simple Storage Service) for scalable object storage
4. Amazon RDS (Relational Database Service) for managed relational databases
5.Amazon Lambda for serverless computing, and many others.
 Resource : Every service has its own resource to build and run your applications and infrastructure in the cloud. Each resource may have its own attributes, settings, and configurations that you can define based on your specific requirements.


IAM – Identity & Access Management -
Q.1 How many resources do we have in Identity and Access Management (IAM)?
Answer: The number of resources in Identity and Access Management (IAM) like User, Users groups, Roles , Access Policies,authentication methods, MFA. 

Q.2 Deployment model in Identity and Access Management (IAM)?
Answer: 1. On-Premises 
        2. Cloud-Based 
        3. Hybrid

Q.3 Identities in Identity and Access Management (IAM)?
Answer: Identities are the people or entities who are given permission to use an organization's resources. These can be employees, contractors, partners, customers, or anyone who needs access.
        Identities are usually represented by user accounts or profiles in the IAM system. Each identity has certain characteristics like a username, password, email address, and roles or permissions that 
        determine what they can do and what they can access.

Q.4 What is an Identity and Access Management (IAM) User?
Answer: A user is someone who interacts with a computer system or network. In IAM, an IAM user is an entity that represents a person or service that interacts with a system or network using login credentials 
        such as a username and password. IAM users are created and managed within an IAM system.

Q.5 What is the Identity and Access Management (IAM) Group?
Answer: In IAM, a group is a bunch of people who have similar attributes like roles, permissions, or access levels. Groups are used to make it easier to control and manage access to resources in an organization's IAM system. By putting people into groups, administrators can easily control who can access certain things based on their job, department, or other factors. For example, a company might 
        create a group for all the employees in the finance department, giving them specific permissions to use financial data and systems.

Q.6 What is the Identity and Access Management (IAM) Policy?
Answer: Policy is a set of rules that say what someone can do and what they can access in an organization's systems.IAM policies control and manage who can access resources based on their needs and roles. These rules can be set at different levels, like for individual users, groups, or specific resources. They say 
        what actions or permissions are allowed or not allowed for each person or group.

Q.7 What is the Identity and Access Management (IAM) Role?
Answer: Role is like a set of permissions that say what someone can do and what they can access in an organization's systems.
        IAM roles are used to give specific privileges and access levels to people based on their jobs or responsibilities. These roles can be customized to fit the organization's needs.
        When someone assumes a role, they automatically get the permissions that come with that role. This means they can do the things and access the resources defined in the role, without needing individual 
        permissions. IAM roles can be assigned to individual users, groups, or even to services.

Q.8 Where do we attach Identity Based Policy?
Answer: Identity-based policies are connected to individual users or groups in an Identity and Access Management (IAM) system. These policies determine the specific permissions and access rights given to the 
        user or group.

Q.9 Where do we attach Resource Based Policy?
Answer: Resource-based policies are directly linked to the resources themselves in an Identity and Access Management (IAM) system. These policies determine the permissions and access rights granted to entities 
        trying to access the resource.

Q.10 Can we be able to create Policy via JSON code?
Answer: Yes, it is possible to create policies using JSON code. JSON (JavaScript Object Notation) is a commonly used format for representing structured data, including policy configurations.
        In an Identity and Access Management (IAM) system, you can create policies programmatically by constructing a JSON document that defines the desired permissions and access rights. 

Q.11 If one user has created it by default, which permission has been assigned to that user?
Answer: 


Q. 12 What is dominator policy?
Answer: If user having less permissions but user adding in group & if group having full permission to that group (full access) in that case user having full access permission. That kind of policy called as Dominator policy

Q. 13 What is ARN? What are the fields in ARN?
Answer: ARN stands for Amazon Resource Name. It is a unique identifier assigned to resources in the Amazon Web Services (AWS) ecosystem.
        The fields in an ARN are as follows:
        1.	arn:aws - This is a fixed string indicating that the identifier is an ARN associated with AWS.
        2.	service - This field specifies the AWS service to which the resource belongs (e.g., s3 for S3 buckets, ec2 for EC2 instances).
        3.	region - It represents the AWS region where the resource is located (e.g., us-east-1 for the US East region).
        4.	account-id - This field contains the AWS account ID associated with the resource.
        5.	resource - It specifies the specific resource identifier within the service (e.g., bucket name for S3, instance ID for EC2).
        6.	qualifier - This field is optional and is used for resources that have different versions or aliases.
        An example of an ARN for an S3 bucket in the US East region with account ID 123456789012 would be: arn:aws:s3:us-east-1:123456789012:bucket-nam

Q. 14 How many types of ARN Partition?
Answer: ARN stands for Amazon Resource Name, which is used in AWS (Amazon Web Services) to identify resources uniquely. The ARN format helps in specifying a resource unambiguously across all of AWS, which aids 
        in permission policies and user activities.
        An ARN is structured as:
        arn:partition:service:region:account-id:resource-id
        In this structure, "partition" is one of the components, and AWS currently has three main ARN partitions:
        aws: The standard partition for general AWS regions.
        aws-cn: The partition for China regions.
        aws-us-gov: The partition for AWS GovCloud (US) regions.
        These partitions help differentiate resources that reside in different geographic or regulatory boundaries.

Q. 15 What are Tags?
Answer: A tag is a label that you assign to a resource. A tag typically consists of a key-value pair, allowing you to categorize resources in various ways.


S3 [ Simple Storage Service]-
Q. 1 Difference between Block storage & Object Storage ?
Answer: Block storage and object storage are two different types of storage systems used in computing. Here are the key differences between them:
Data Organization: In block storage, data is organized into fixed-sized blocks or chunks, each with its own address. These blocks can be accessed individually and are typically managed by the operating system. On the other hand, object storage organizes data as objects, which consist of the data itself along with metadata and a unique identifier. These objects are stored in a flat address space and can be accessed via APIs.
Access Method: Block storage is accessed at the block level, meaning that applications or operating systems can read or write data to specific blocks using protocols like SCSI or Fibre Channel. Object storage, on the other hand, is accessed through APIs, such as RESTful APIs, which allow applications to interact with objects using HTTP commands like GET, PUT, or DELETE.
Scalability: Object storage is highly scalable and can handle massive amounts of data. It is designed to scale horizontally by distributing data across multiple storage nodes. Block storage, on the other hand, may have limitations in scalability as it relies on the capacity of individual storage devices or arrays.
Metadata: Object storage includes rich metadata capabilities, allowing users to attach additional information to objects. This metadata can be used for indexing, searching, and organizing data. Block storage, on the other hand, does not typically have built-in metadata capabilities, and any metadata associated with the data is managed by the operating system or application.
Use Cases: Block storage is commonly used in scenarios that require low-level access to data, such as databases or virtual machines. It provides a high level of control and performance for these applications. Object storage, on the other hand, is often used for storing unstructured data like images, videos, documents, or backups. It is well-suited for use cases that require massive scalability, durability, and cost-effective storage.
Overall, block storage offers low-level access and performance, while object storage provides scalability, metadata capabilities, and ease of use for large-scale data storage. The choice between them depends on the specific requirements and use cases of the application or workload.

Q.2 Difference between static website & dynamic website ?
Answer: Static websites and dynamic websites are two different types of websites based on how the content is generated and served. Here are the key differences between them:
Content Generation: Static websites are created with fixed content that remains the same for every user. The content is typically written in HTML and CSS and stored as files on a web server. Dynamic websites, on the other hand, generate content dynamically by retrieving data from a database or other sources. The content is generated on the fly based on user requests and can vary for different users or based on certain conditions.
Interactivity: Static websites are limited in terms of interactivity. They usually consist of static pages that provide information without much user interaction. Dynamic websites, on the other hand, can be highly interactive. They can include features like user login, forms, search functionality, personalized content, and real-time updates.
Content Management: Static websites are typically managed by manually editing HTML and CSS files. Any changes to the content require editing and updating the files directly. Dynamic websites, on the other hand, often use content management systems (CMS) that provide an interface for managing and updating content. CMS allows non-technical users to easily update and publish content without needing to edit code.
Scalability: Static websites are generally easier to scale as they can be cached and served directly from a web server without the need for additional processing. Dynamic websites, especially those with heavy traffic or complex functionality, may require more resources and infrastructure to handle the dynamic content generation and database queries.
Development Complexity: Static websites are relatively simple to develop as they involve creating static HTML and CSS files. Dynamic websites require more complex development, involving server-side scripting languages like PHP, Python, or JavaScript, along with database integration.
SEO and Performance: Static websites are often considered more SEO-friendly as search engines can easily crawl and index their content. They also tend to have faster load times since the content is pre-generated and served as static files. Dynamic websites may require additional optimization efforts to ensure good SEO and performance, as the content is generated dynamically and may require database queries or server-side processing.
Overall, static websites are suitable for simple informational websites with fixed content, while dynamic websites are more appropriate for interactive, data-driven websites that require frequent updates and user interactions. The choice between them depends on the specific requirements and goals of the website.

Q.3 What are the naming rules ?
Answer: Naming rules refer to the guidelines and conventions used for naming variables, functions, classes, and other programming elements in software development. Here are some common naming rules:
Use meaningful names: Names should be descriptive and reflect the purpose or functionality of the element being named. Avoid using abbreviations or acronyms that may not be easily understood by others.
Use camelCase: In most programming languages, camelCase is used for naming variables, functions, and other elements. CamelCase involves starting the first word with a lowercase letter and then capitalizing the first letter of each subsequent word. For example, "firstName" or "getUserInfo".
Use PascalCase: PascalCase is used for naming classes and other types. It involves capitalizing the first letter of each word, without spaces or underscores. For example, "User" or "UserInfo".
Use underscores: In some programming languages, underscores are used to separate words in variable and function names. For example, "first_name" or "get_user_info".
Avoid reserved words: Avoid using reserved words or keywords that are already defined in the programming language. For example, "int" or "if" in C++.
Be consistent: Consistency is key in naming conventions. Use the same naming conventions throughout the codebase to make it easier to read and maintain.
Use plural for collections: When naming collections or arrays, use plural names to indicate that they contain multiple items. For example, "users" or "items".
Use lowercase for constants: Constants should be named using all uppercase letters and underscores to separate words. For example, "MAX_VALUE" or "PI".


Q.4 What is the major resource of S3 Bucket ?
Answer: The major resource of an Amazon S3 (Simple Storage Service) bucket is the storage itself. S3 buckets are designed to store and retrieve any amount of data from anywhere on the web. They provide scalable, durable, and highly available object storage for various use cases.
When you create an S3 bucket, you are essentially creating a container to store your data. This data can include files, documents, images, videos, backups, logs, and more. S3 buckets are organized by a globally unique bucket name, and the data within the bucket is stored as objects.
Each object in an S3 bucket has a unique key that identifies it within the bucket. The key can be thought of as the path or filename of the object. Objects in S3 can range in size from 0 bytes to 5 terabytes, allowing for the storage of large files.
In addition to the storage itself, S3 buckets provide various features and capabilities, such as versioning, access control, encryption, lifecycle management, event notifications, and integration with other AWS services. These features allow you to manage and secure your data effectively.
Overall, the primary resource of an S3 bucket is the storage space it provides, allowing you to store and retrieve your data reliably and securely.

Q.5 Why do we need to host static websites instead of dynamic websites ?
Answer: Static websites and dynamic websites serve different purposes and have different requirements. Here are some reasons why you might choose to host a static website instead of a dynamic website:
Simplicity: Static websites are simpler to create and maintain than dynamic websites. They don't require a server-side scripting language or a database, which makes them easier to deploy and manage.
Cost: Static websites are often less expensive to host than dynamic websites. Since they don't require a server-side scripting language or a database, you can host them on a cheaper web hosting plan or even use a free hosting service like GitHub Pages or Netlify.
Speed: Static websites are faster to load than dynamic websites because they don't require server-side processing. The content is pre-generated and served as static files, which can be cached and served directly from a web server without the need for additional processing.
Security: Static websites are generally considered more secure than dynamic websites because they don't have a server-side scripting language or a database that can be vulnerable to attacks. They also don't require user input, which reduces the risk of security breaches.
Scalability: Static websites are highly scalable because they can be cached and served directly from a web server without the need for additional processing. This means that they can handle large amounts of traffic without requiring additional resources or infrastructure.
Overall, static websites are a good choice for simple websites with fixed content that don't require frequent updates or user interactions. They are easy to create and maintain, cost-effective, fast, secure, and scalable. However, if your website requires dynamic content or user interactions, a dynamic website with server-side scripting and a database may be a better choice.

Q.6 What is versioning & Why do we need versioning ?
Answer: Versioning refers to the practice of assigning unique identifiers or numbers to different iterations or releases of a software, application, or any other type of system. Each version represents a 
        distinct state of the system at a particular point in time.
        There are several reasons why versioning is important:
        1.Tracking changes
        2.Collaboration and teamwork: 
        3.Bug tracking and issue resolution
        4.Software updates and releases
        5.Compatibility and dependencies  
        In summary, versioning is important for tracking changes, enabling collaboration, resolving issues, managing updates, and ensuring compatibility in software and system development. It provides a 
        structured approach to managing and documenting the evolution of a system over time.

Q.7 What are the objects and types of objects that we are uploading into the S3 Bucket ?
Answer: In an S3 bucket, you can upload various types of objects, including:
        1.Files
        2.Folders (or directories): 
        3.Static website files
        4.Database backups
        5.Log files
        6.Application files

Q. 8 Why is MFA Delete important in S3 Bucket object level ?
Answer: MFA (Multi-Factor Authentication) Delete is an optional security feature in Amazon S3 that adds an extra layer of protection to your S3 objects by requiring a second factor of authentication before allowing the deletion of an object. This feature is important because it helps prevent accidental or malicious deletion of objects in your S3 bucket.
Without MFA Delete, any user with sufficient permissions can delete objects in an S3 bucket, either intentionally or unintentionally. This can result in the permanent loss of data, which can be costly and time-consuming to recover. Accidental deletions can occur due to human error, such as mis-clicking or mis-typing, or due to software bugs or glitches.
MFA Delete adds an additional layer of security to the deletion process by requiring the user to provide a second factor of authentication, such as a physical token or a mobile app, in addition to their regular AWS credentials. This ensures that only authorized users with physical possession of the MFA device can delete objects in the bucket, making it much harder for attackers to delete objects maliciously.
MFA Delete is particularly important for organizations that store sensitive or critical data in S3, as it provides an extra layer of protection against data loss or data breaches. It is also a recommended best practice for compliance with various security standards and regulations, such as PCI DSS, HIPAA, and GDPR.
In summary, MFA Delete is important in S3 bucket object level because it helps prevent accidental or malicious deletion of objects, adds an extra layer of security to the deletion process, and is a recommended best practice for compliance with security standards and regulations.

Q. 9 What is S3 Multipart upload ?
Answer: S3 Multipart Upload is a feature of Amazon S3 that allows you to upload large objects in parts, instead of uploading the entire object in a single request. It is particularly useful when dealing with files that are larger than 100 MB, as it provides benefits such as improved reliability, parallelization, and resumability.

Q.10 What are the storage classes in Amazon S3 ? 
Answer: Amazon S3 offers several storage classes, each designed to meet different performance, durability, and cost requirements. The storage classes available in Amazon S3 are:
        1.Standard
        2.Intelligent-Tiering
        3.Standard-IA (Infrequent Access)
        4.One Zone-IA
        5.Glacier
        6.Glacier Deep Archive
        7.S3 Outposts

Q.11 What is ACL ?
Answer: ACL stands for Access Control List, which is a set of permissions that define who can access an Amazon S3 bucket or object and what actions they can perform on it. ACLs are used to manage access to S3 resources at a granular level, allowing you to control access to individual objects or entire buckets.

Q.12 Why do we need ACL ?
Answer: ACLs (Access Control Lists) are necessary for several reasons:
Granular access control: ACLs allow you to define fine-grained permissions for individual users, groups, or AWS accounts. This level of control enables you to grant or restrict access to specific S3 buckets or objects based on user roles, responsibilities, or business requirements.
Data security: ACLs play a crucial role in ensuring the security of your data stored in Amazon S3. By properly configuring ACLs, you can restrict access to sensitive information and prevent unauthorized users from accessing or modifying your data.
Compliance requirements: Many industries and regulatory frameworks have specific data access and protection requirements. ACLs enable you to meet these compliance standards by controlling access to sensitive data and providing an audit trail of who accessed the data and when.
Collaboration and sharing: ACLs allow you to share S3 buckets or objects with other AWS accounts or specific users. By granting appropriate permissions, you can collaborate with partners, vendors, or clients, allowing them to access and work with the shared data.
Access monitoring and auditing: ACLs provide a mechanism for tracking and auditing access to S3 resources. By configuring appropriate ACLs, you can log and monitor access events, enabling you to review and analyze access patterns, detect potential security breaches, and maintain an audit trail for compliance purposes.
Integration with other AWS services: ACLs are integrated with other AWS services, such as IAM (Identity and Access Management) and S3 bucket policies. By combining ACLs with IAM policies and bucket policies, you can create comprehensive access control strategies that encompass user permissions, resource-based policies, and network-level controls.
Overall, ACLs are essential for maintaining the security, compliance, and accessibility of your data stored in Amazon S3. They provide the flexibility to define and enforce access controls at a granular level, ensuring that only authorized users or applications can access and manipulate your S3 resources.

Q.13 What is a Life cycle policy ? Why do we need to use the life cycle rule ?
Answer: A lifecycle policy in Amazon S3 is a set of rules that define the actions to be taken on objects in a bucket over time. It allows you to automate the management of your S3 objects by transitioning them 
        between different storage classes or deleting them based on specified criteria.
        Here's why we need to use a lifecycle policy:
        1. Cost optimization
        2. Data lifecycle management
        3.Performance optimization
        4.Simplified management
        5.Data protection and disaster recovery
        6.Compliance and data retention
        Overall, lifecycle policies in Amazon S3 provide a powerful mechanism to automate the management of your objects, optimize costs, improve performance, and ensure compliance with data retention policies. 
      
Q.14 How can we make our bucket public ?
Answer: To make an Amazon S3 bucket public, you need to adjust the bucket's permissions and access control settings. Here are the steps to make a bucket public:
        Sign in to the AWS Management Console and navigate to the Amazon S3 service.
        Select the bucket for which you want to make the contents public.
        Click on the "Permissions" tab.
        Under the "Block public access" section, ensure that all settings are disabled. This includes "Block all public access" and "Block public access to buckets and objects granted through new access control 
        lists (ACLs)".
        Scroll down to the "Bucket policy" section and click on the "Edit" button.
        In the bucket policy editor, enter the following policy to allow public access to all objects in the bucket:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::your-bucket-name/*"
      ]
    }
  ]
}
       Replace "your-bucket-name" with the actual name of your bucket.
       Click on the "Save changes" button to apply the bucket policy.
       After making these changes, all objects in the bucket will be publicly accessible. Keep in mind that making a bucket public means that anyone with the object URL can access its contents. Ensure that you 
       understand the implications and potential security risks before making a bucket public.

Q.15 How can we give public access to our bucket ?
Answer: To give public access to an Amazon S3 bucket, you can adjust the bucket's permissions and access control settings. Here are the steps to give public access to a bucket:
        Sign in to the AWS Management Console and navigate to the Amazon S3 service.
        Select the bucket for which you want to give public access.
        Click on the "Permissions" tab.
        Under the "Block public access" section, ensure that all settings are disabled. This includes "Block all public access" and "Block public access to buckets and objects granted through new access control 
        lists (ACLs)".
        Scroll down to the "Access control list (ACL)" section and click on the "Edit" button.
        In the ACL editor, grant "Read" or "Read/Write" access to the "Everyone" group. This will give public access to the bucket and its objects.
        Note: Granting "Read/Write" access to the "Everyone" group will allow anyone to modify or delete objects in the bucket. Only grant "Read" access if you want to restrict write/delete operations to 
        specific users or applications.
        Click on the "Save changes" button to apply the ACL changes.
        After making these changes, the bucket and its objects will be publicly accessible. Keep in mind that giving public access means that anyone with the object URL can access and potentially modify or 
        delete its contents. Ensure that you understand the implications and potential security risks before giving public access to a bucket.

Q.16 Aws pricing factor of the S3 Service?
Answer: The pricing for Amazon S3 (Simple Storage Service) is determined by several factors. Here are the main components that affect the cost:
       Storage usage: You are charged based on the amount of data stored in your S3 buckets. This includes the size of the objects, the number of objects, and any additional metadata associated with the objects.
       Data transfer: There are costs associated with transferring data in and out of your S3 buckets. This includes data transfer within the same AWS Region, data transfer between different AWS Regions, and 
       data transfer out to the internet.
       Requests: S3 charges for the number of requests made to your buckets. This includes GET requests (retrieving objects), PUT requests (uploading objects), COPY requests, and other API calls.
       Storage management features: S3 offers various storage management features like versioning, cross-region replication, and lifecycle policies. Enabling these features may incur additional costs.
       Storage classes: S3 provides different storage classes with varying performance and cost characteristics. The pricing varies depending on the storage class you choose, such as Standard, Intelligent- 
       Tiering, Glacier, and Glacier Deep Archive.
       Data transfer acceleration: If you choose to use Amazon S3 Transfer Acceleration to speed up data transfers, there may be additional costs associated with this feature.
       It's important to review the AWS pricing documentation for Amazon S3 to get detailed and up-to-date information on the pricing structure, as pricing can vary based on factors such as region and usage 
       patterns.

Q.17 How can we make our object public ?
Answer : To make every object public you should add a Bucket Policy to the bucket.
         Go to the bucket's Permissions tab
         Go to the Block public access options
         Turn off the options that mention Bucket Policies

Q. 18 How can we configure the static website logs in s3 ?



Q.19 What is CORS ?
Answer:“CORS” stands for Cross- Origin Resource Sharing. It allows you to make requests from one website to another website in the browser, which is normally prohibited by another browser policy called the 
        Same-Origin Policy (SOP). 

Q.20 What is S3 Inventory ?
 Answer:This tool lets you see an inventory of all the objects in your S3 bucket daily or weekly. S3 inventory provides a detailed list of your objects and offers information about many metadata fields, such as 
        storage class and size. This feature makes S3 inventory a valuable tool to AWS admins who want to keep track of their data usage and costs.

Q.21 What does it mean by Requester pays ?
 Answer:With Requester Pays buckets, the requester instead of the bucket owner pays the cost of the request and the data download from the bucket. The bucket owner always pays the cost of storing data.

Q.22	What is the secondary word to Transfer acceleration ?Why do we need to use this transfer acceleration ?
Answer:



Cloud Trail –
Q.1 What is a cloud trail?
Answer: A cloud trail is a service provided by cloud computing platforms that allows users to monitor and log all API calls made on their account. This helps in tracking changes to resources, troubleshooting 
        operational and security issues, and ensuring compliance with regulatory requirements. Cloud trail provides a comprehensive view of all activity within an account, including actions taken by users, 
        applications, and services.

Q.2 Why do we use trails, what is the exact purpose of enabling the trail in cloud production accounts?
Answer: Enabling a cloud trail in a production account serves several important purposes:
        Security and Compliance: Cloud trails help in monitoring and auditing all activities within the cloud environment, ensuring that security policies and compliance requirements are being met. This 
        includes tracking who accessed resources, what changes were made, and when they occurred.
        Troubleshooting and Debugging: By providing detailed logs of API calls and activities, cloud trails can be instrumental in troubleshooting and debugging issues within the cloud environment. This can 
        help in identifying the root cause of problems and resolving them more effectively.
        Governance and Risk Management: Cloud trails enable organizations to gain better visibility and control over their cloud infrastructure, allowing them to manage risks and govern their cloud usage more 
        effectively.
        Forensic Analysis: In the event of a security incident or breach, cloud trails can provide valuable forensic evidence to understand the nature of the incident, identify the source, and take appropriate 
        remediation actions.
        Overall, enabling a cloud trail in a production account is crucial for maintaining security, compliance, and operational integrity within a cloud environment.

Q.3 Explain how we can create a trail in aws cloud trail?
Answer: To create a trail in AWS CloudTrail, follow these steps:
        1. Sign in to the AWS Management Console and open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.
        2. In the CloudTrail console, choose Trails in the navigation pane.
        3. Choose Create trail.
        4. On the Create trail page, provide a name for the trail and select the AWS S3 bucket where you want to store the log files. You can also choose to apply an S3 bucket policy to the bucket to restrict access to the log files.
        5. Choose the option to enable the trail for all regions or select specific regions where you want to capture API activity.
        6. Optionally, you can choose to log data events for S3 buckets and define the data events that you want to capture.
        7. Choose Create.
        Once you have completed these steps, the trail will be created and will start capturing API activity and data events according to the settings you specified. You can then view and analyze the log files in the specified S3 bucket using the AWS Management Console, CLI, or API.

Q.4 How can we enable logging for S3 bucket using cloud trails?
Answer: To enable logging for S3 bucket using CloudTrail, follow these steps:
        1. Open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.
        2. In the navigation pane, choose Trails.
        3. Select the trail for which you want to enable S3 bucket logging.
        4. Choose Edit.
        5. In the Data events section, choose Add S3 bucket.
        6. In the Add S3 bucket dialog box, select the S3 bucket for which you want to enable logging.
        7. Choose the data events that you want to capture for the selected S3 bucket. You can choose from the following options:
        - All object-level operations: Captures all object-level operations, including read, write, delete, and permission changes.
        - Read-only object-level operations: Captures only read operations on objects.
        - Write-only object-level operations: Captures only write operations on objects.
        - All object-level operations except read: Captures all object-level operations except read operations.
        8. Choose Save.
        Once you have completed these steps, CloudTrail will start capturing data events for the selected S3 bucket and storing the log files in the specified S3 bucket. You can then view and analyze the log files using the AWS Management Console, CLI, or API.


Q.5 How do you get the list of all created trailers in your production account?
Answer: To get the list of all created trails in your AWS production account, you can use the AWS Command Line Interface (CLI) or the AWS Management Console. Here's how you can do it using both methods:
        Using AWS CLI:
        1. Open your terminal or command prompt.
        2. Run the following command to list all the trails in your AWS account: aws cloudtrail describe-trails
        This command will return a JSON output containing information about all the trails created in your account.
        Using AWS Management Console:
        1. Sign in to the AWS Management Console and open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.
        2. In the CloudTrail console, choose Trails in the navigation pane.
        3. You will see a list of all the trails created in your account, along with their details such as trail name, S3 bucket name, and status.
        By using either of these methods, you can easily get the list of all created trails in your AWS production account.

Q.6 Can we create a trail for a multi region, if yes then how can we configure it?
Answer: Yes, we can create a trail for a multi-region in AWS CloudTrail. To configure a multi-region trail, follow these steps:
        1. Open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.
        2. Choose Trails in the navigation pane.
        3. Choose Create trail.
        4. Provide a name for the trail and select the S3 bucket where you want to store the log files.
        5. In the Management events section, choose the option to enable the trail for all regions.
        6. In the Data events section, choose Add S3 bucket.
        7. Select the S3 bucket for which you want to enable logging.
        8. Choose the data events that you want to capture for the selected S3 bucket.
        9. Choose Create.
        Once you have completed these steps, the trail will be created and will start capturing API activity and data events in all regions. You can then view and analyze the log files in the specified S3 bucket using the AWS Management Console, CLI, or API.
        Note: Multi-region trails incur additional charges for data transfer and storage. You should carefully consider the cost implications before configuring a multi-region trail.

Q.7 How can we disable the logging for certain events, services in cloud trail, If yes so explain how?
Answer: Yes, you can disable logging for certain events or services in AWS CloudTrail by configuring event selectors for your trail. Event selectors allow you to specify which events you want to log and which ones you want to exclude.
Here's how you can disable logging for certain events or services in CloudTrail using the AWS Management Console:
1. Sign in to the AWS Management Console and open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.
2. In the CloudTrail console, choose Trails in the navigation pane.
3. Select the trail for which you want to configure event selectors.
4. Choose Edit.
5. In the Data events section, you can configure event selectors to include or exclude specific services and operations. You can choose to enable logging for all data events, or you can select specific services and operations to include or exclude.
6. To exclude specific services or operations, choose Add data event.
7. In the Add data event dialog box, you can specify the service name and operations that you want to exclude from logging.
8. After configuring the event selectors, choose Save.
By following these steps, you can disable logging for certain events or services in CloudTrail by configuring event selectors for your trail. The specified events or services will be excluded from the log files stored in the S3 bucket.

Q.8 Real time use case of cloud trail?
ANS: A real-time use case of AWS CloudTrail is to monitor and audit the activity and changes within your AWS environment. Here's a specific example of how CloudTrail can be used in a real-world scenario:
Imagine you are responsible for the security and compliance of your organization's AWS infrastructure. You want to ensure that all changes made to your AWS resources are tracked and audited to maintain a secure and compliant environment.
In this scenario, you can use CloudTrail to:
1. Monitor API Activity: CloudTrail can capture all API calls made in your AWS account, including calls to AWS services, such as creating, modifying, or deleting resources. This allows you to track who is making changes and which resources are being modified.
2. Detect Unauthorized Access: By analyzing CloudTrail logs, you can detect unauthorized access attempts, such as failed login attempts or unusual API activity, which may indicate a security threat.
3. Investigate Security Incidents: In the event of a security incident, CloudTrail logs can be used to investigate the timeline of events, identify the source of the incident, and understand the impact on your AWS resources.
4. Ensure Compliance: CloudTrail logs provide a comprehensive audit trail that can be used to demonstrate compliance with security standards and regulations. This is particularly important in industries with strict compliance requirements, such as finance, healthcare, and government.
5. Troubleshoot Operational Issues: CloudTrail logs can be used to troubleshoot operational issues by providing insights into the activities and changes that may have led to the problem.
By leveraging CloudTrail in this real-time use case, you can enhance the security, compliance, and operational visibility of your AWS environment, ultimately helping to maintain a secure and well-managed infrastructure.

Q. 9 What is cloud trail event history?
ANS: The CloudTrail event history is a feature within AWS CloudTrail that provides a record of API events and activities that have occurred within your AWS account. It captures detailed information about the API calls made by various AWS services and resources, including who made the call, the source IP address, the time of the event, and the specific action that was performed.
The CloudTrail event history allows you to view, search, and analyze the historical records of API activity within your AWS account. You can use this information for security analysis, compliance auditing, troubleshooting, and operational monitoring.
Key features of CloudTrail event history include:
1. Search and Filter: You can search and filter the event history based on various criteria, such as time range, user identity, resource type, and specific API actions.
2. Detailed Event Information: Each event in the event history provides detailed information about the API call, including the request and response parameters, the AWS service involved, and the outcome of the action.
3. Integration with CloudWatch: CloudTrail event history can be integrated with Amazon CloudWatch, allowing you to set up alarms and notifications based on specific API activity patterns or anomalies.
4. Compliance and Governance: The event history can be used to demonstrate compliance with security standards and governance requirements, as it provides a comprehensive audit trail of API activity within your AWS environment.
By leveraging the CloudTrail event history, AWS customers can gain visibility into the API activity within their accounts, track changes and actions, and ensure the security and compliance of their AWS resources.

Q. 10 What is log file integrity validation in cloud trail?
ANS: Log File Integrity Validation is a feature in AWS CloudTrail that helps ensure the integrity and authenticity of log files generated by CloudTrail. It provides a way to verify that the log files have not been tampered with or altered after they were created. This is important for maintaining the security and reliability of the audit trail provided by CloudTrail.
When Log File Integrity Validation is enabled for a CloudTrail trail, CloudTrail signs each log file using a digital signature. The signature is based on the SHA-256 algorithm and is included in the log file itself. Additionally, CloudTrail delivers the log files to the specified Amazon S3 bucket in a write-once-read-many (WORM) format, which means that once a log file is delivered, it cannot be modified or deleted.
By using Log File Integrity Validation, you can be confident that the log files generated by CloudTrail are authentic and have not been altered. This is crucial for security, compliance, and audit purposes, as it provides assurance that the log data accurately reflects the activities and events that occurred within your AWS environment.
When reviewing CloudTrail log files, you can use the digital signatures to verify their integrity, ensuring that the log files have not been tampered with. This helps maintain the trustworthiness of the audit trail and supports security and compliance efforts within your organization.

SNS Service -
Q.1 What is SNS?
ANS: SNS stands for Simple Notification Service, which is a fully managed messaging service provided by Amazon Web Services (AWS). SNS enables you to send messages or notifications to a variety of endpoints, including email, SMS (text messages), mobile push notifications, and HTTP/HTTPS endpoints.
SNS allows you to send messages to multiple recipients at once, making it a scalable and efficient way to send notifications. You can also use SNS to trigger automated actions in response to events, such as sending an email or SMS notification when a specific event occurs in your AWS environment.
SNS provides a simple and flexible API for sending messages and supports a variety of messaging protocols, including JSON, XML, and raw text. Additionally, SNS provides features such as message filtering, message encryption, and message delivery status tracking.
SNS can be integrated with other AWS services, such as AWS Lambda, to trigger automated actions in response to events. For example, you can use SNS to trigger a Lambda function that automatically scales up or down your AWS resources based on the incoming message.
Overall, SNS is a powerful messaging service that enables you to send notifications to a variety of endpoints and trigger automated actions in response to events, making it a valuable tool for building scalable and responsive applications on AWS.

Q.2 Why do we use SNS?
ANS: SNS (Simple Notification Service) is used for a variety of purposes in cloud computing and application development, primarily due to its capabilities for sending notifications and messages to a wide range of endpoints. Here are some key reasons why SNS is commonly used:
1. Real-time Notifications: SNS allows you to send real-time notifications to a variety of recipients, including email, SMS, mobile push notifications, and HTTP/HTTPS endpoints. This is essential for keeping users, administrators, and other systems informed about important events, alerts, and updates.
2. Scalable and Flexible: SNS is a fully managed service provided by AWS, making it scalable and flexible. It can handle large volumes of messages and is designed to be reliable and highly available, making it suitable for applications with varying workloads.
3. Event-Driven Architecture: SNS is often used to implement event-driven architectures, where it can act as a messaging bus to distribute event notifications to multiple subscribers. This is particularly useful in microservices architectures and serverless applications.
4. Integration with AWS Services: SNS integrates seamlessly with other AWS services, such as Amazon Lambda, Amazon SQS, and Amazon EC2, allowing you to trigger automated actions and workflows in response to messages or events.
5. Application Monitoring and Alarming: SNS can be used for application monitoring and alarming, sending notifications when specific conditions or thresholds are met. This is crucial for maintaining the health and performance of applications and infrastructure.
6. Cross-Platform Messaging: SNS supports multiple messaging protocols and formats, allowing you to send messages in JSON, XML, or raw text. This flexibility enables cross-platform messaging and integration with different types of applications and systems.
7. Message Filtering and Delivery Status Tracking: SNS provides features for message filtering, allowing you to send targeted messages to specific recipients based on their preferences or subscriptions. Additionally, it offers delivery status tracking, so you can monitor the delivery of messages to endpoints.
Overall, SNS is used to facilitate effective communication, event-driven architectures, and automated workflows within AWS environments and applications, making it a valuable tool for building scalable and responsive systems.

Q.3 What is an Amazon SNS function, and how we can configure it.
ANS: Amazon SNS (Simple Notification Service) is a fully managed messaging service provided by Amazon Web Services (AWS). It enables you to send messages or notifications to a variety of endpoints, including email, SMS (text messages), mobile push notifications, and HTTP/HTTPS endpoints. SNS can be configured and used through the AWS Management Console, AWS Command Line Interface (CLI), or AWS SDKs.
Here's an overview of how you can configure and use Amazon SNS:
1. Creating a Topic: The first step in using SNS is to create a topic. A topic is a communication channel to which you can publish messages. You can create a topic using the AWS Management Console or AWS CLI. When creating a topic, you will provide a name and an optional display name.
2. Subscribing Endpoints to the Topic: Once you have created a topic, you can subscribe endpoints to the topic to receive messages. Endpoints can include email addresses, phone numbers for SMS messages, mobile device tokens for push notifications, or HTTP/HTTPS endpoints. You can subscribe endpoints using the AWS Management Console, AWS CLI, or programmatically through the AWS SDKs.
3. Publishing Messages to the Topic: After creating a topic and subscribing endpoints to it, you can publish messages to the topic. Messages can be published using the AWS Management Console, AWS CLI, or programmatically through the AWS SDKs. When publishing a message, you specify the topic to which the message should be sent and the content of the message.
4. Configuring Message Attributes: SNS allows you to set message attributes such as message structure (JSON, raw text, etc.), message deduplication ID, message group ID, and more. These attributes can be configured when publishing messages to the topic.
5. Using SNS with AWS Services: SNS can be integrated with other AWS services. For example, you can configure an Amazon S3 bucket to send event notifications to an SNS topic, or you can use SNS to trigger AWS Lambda functions in response to messages.
6. Monitoring and Logging: SNS provides monitoring and logging capabilities, allowing you to track message deliveries, view message delivery status, and monitor the usage of SNS topics.
When configuring Amazon SNS, it's important to consider security best practices, such as setting appropriate access controls and permissions for topics and subscriptions, and enabling encryption for message delivery.
Overall, Amazon SNS is a powerful and versatile service for sending notifications and messages, and it can be configured and used through various AWS management interfaces and APIs to meet the messaging needs of your applications and systems.

Q.4 Difference between Amazon SNS & Amazon SQS.
ANS: Amazon SNS (Simple Notification Service) and Amazon SQS (Simple Queue Service) are both messaging services offered by Amazon Web Services (AWS). Although they have some similarities, they are designed for different use cases and have different characteristics. Here are some key differences between Amazon SNS and Amazon SQS:
1. Message Delivery: Amazon SNS delivers messages to multiple subscribers in real-time, while Amazon SQS delivers messages to a single consumer at a time. SNS is ideal for broadcasting messages to multiple recipients, while SQS is designed for decoupling and scaling applications that need to process messages asynchronously.
2. Message Persistence: Amazon SQS stores messages in a queue until they are processed, while Amazon SNS does not store messages. SNS simply delivers messages to subscribers and does not persist them.
3. Message Ordering: Amazon SQS provides support for ordered message delivery, while Amazon SNS does not guarantee message ordering. If message ordering is important for your application, you should use SQS.
4. Message Format: Amazon SQS supports multiple message formats, including JSON, XML, and binary data, while Amazon SNS supports only JSON and raw text messages.
5. Subscription Management: Amazon SNS allows you to manage subscriptions to topics and send messages to subscribers, while Amazon SQS requires you to manage the queue and the consumers that process messages from the queue.
6. Pricing: Amazon SQS charges based on the number of requests and data transfer, while Amazon SNS charges based on the number of messages sent and delivered.
Overall, Amazon SNS and Amazon SQS are both useful messaging services, but they are designed for different use cases. Amazon SNS is ideal for broadcasting messages to multiple subscribers in real-time, while Amazon SQS is designed for decoupling and scaling applications that need to process messages asynchronously.

Q.5 What are the different delivery formats and transports in AWS SNS?
ANS: Amazon SNS (Simple Notification Service) supports several delivery formats and transports to accommodate various use cases and communication requirements. The different delivery formats and transports available in AWS SNS include:
1. HTTP/HTTPS: SNS allows you to deliver messages to HTTP/HTTPS endpoints using POST requests. This enables you to send notifications to custom web services, webhooks, or any HTTP/HTTPS endpoint that can process incoming messages.
2. Email: SNS supports the delivery of messages via email. You can send notifications and messages to email addresses, allowing you to reach recipients through their email clients.
3. SMS (Text Messages): SNS provides the ability to send messages as SMS (Short Message Service) text messages to mobile phone numbers. This feature is particularly useful for reaching users who may not have access to email or other communication channels.
4. Mobile Push Notifications: SNS supports the delivery of messages as mobile push notifications to mobile devices running iOS, Android, or other mobile platforms. This allows you to engage with users through their mobile apps and deliver real-time updates and alerts.
5. Amazon Simple Queue Service (SQS): SNS can deliver messages to Amazon SQS queues, enabling you to use SNS as a message producer for SQS consumers. This allows you to decouple message publishers and consumers, and scale message processing independently.
6. AWS Lambda: SNS can invoke AWS Lambda functions directly, allowing you to trigger serverless functions in response to messages published to SNS topics. This integration enables event-driven architectures and serverless workflows.
7. Application Endpoints: SNS supports application endpoints for platforms such as Apple Push Notification Service (APNS), Google Cloud Messaging (GCM)/Firebase Cloud Messaging (FCM), and Amazon Device Messaging (ADM). This allows you to send messages to specific mobile apps and devices for push notifications.
8. AWS IoT: SNS can deliver messages to AWS IoT Core, allowing you to send notifications to IoT devices and applications connected to the AWS IoT platform.
Each delivery format and transport in AWS SNS is designed to address specific communication needs and integration requirements, providing flexibility and versatility for sending messages to a wide range of endpoints and systems.

Q.6 What is the difference between SNS FIFO & Standard while creating the SNS topic.
ANS: When creating an SNS (Simple Notification Service) topic in AWS, you have the option to choose between two types: Standard and FIFO (First-In-First-Out). Here are the key differences between SNS FIFO and Standard topics:
1. Message Ordering:
   - Standard: SNS Standard topics do not guarantee the order in which messages are delivered to subscribers. Messages can be delivered in any order, and duplicate messages are possible.
   - FIFO: SNS FIFO topics ensure that messages are delivered to subscribers in the exact order in which they are published. This guarantees message ordering and eliminates the possibility of duplicate messages within a specific deduplication interval.
2. Message Deduplication:
   - Standard: SNS Standard topics do not provide built-in message deduplication. Duplicate messages can be delivered to subscribers.
   - FIFO: SNS FIFO topics automatically deduplicate messages within a specific deduplication interval, ensuring that subscribers receive only unique messages during that time window.
3. Delivery Retries:
   - Standard: SNS Standard topics support configurable delivery policies for retries and delivery delays, allowing you to customize the retry behavior for messages that fail to be delivered.
   - FIFO: SNS FIFO topics also support configurable delivery policies for retries and delivery delays, but they have additional constraints related to message ordering and deduplication.
4. Supported Protocols:
   - Standard: SNS Standard topics support a wide range of delivery protocols, including HTTP/HTTPS, email, SMS, mobile push notifications, AWS Lambda, and more.
   - FIFO: SNS FIFO topics support a subset of the delivery protocols available for Standard topics, focusing on the most common use cases for ordered and deduplicated message delivery.
5. Use Cases:
   - Standard: SNS Standard topics are suitable for scenarios where strict message ordering and deduplication are not critical, and where a wide variety of delivery protocols are required.
   - FIFO: SNS FIFO topics are ideal for use cases that demand strict message ordering and deduplication, such as financial transactions, order processing, and other applications where the sequence and uniqueness of messages are crucial.
When choosing between SNS FIFO and Standard topics, consider the specific requirements of your application or system, including the need for message ordering, deduplication, and the supported delivery protocols. Select the topic type that best aligns with your messaging requirements and the guarantees you need for message delivery.

Q.7 On which services are configured with the AWS SNS?
ANS: AWS SNS (Simple Notification Service) can be configured to work with several other AWS services to facilitate the delivery of messages and notifications. Some of the key services that can be configured with AWS SNS include:
1. Amazon SQS (Simple Queue Service): SNS can deliver messages to Amazon SQS queues, allowing you to use SNS as a message producer for SQS consumers. This enables you to decouple message publishers and consumers, and scale message processing independently.
2. AWS Lambda: SNS can invoke AWS Lambda functions directly, allowing you to trigger serverless functions in response to messages published to SNS topics. This integration enables event-driven architectures and serverless workflows.
3. Amazon S3 (Simple Storage Service): SNS can be configured to send notifications when new objects are created in an Amazon S3 bucket, providing a way to trigger actions or alerts based on changes to your S3 storage.
4. Amazon CloudWatch: SNS can be used to deliver notifications based on Amazon CloudWatch alarms. This allows you to send alerts and notifications when CloudWatch alarms are triggered, providing real-time monitoring and alerting capabilities.
5. AWS IoT: SNS can deliver messages to AWS IoT Core, allowing you to send notifications to IoT devices and applications connected to the AWS IoT platform.
6. Amazon Kinesis Data Firehose: SNS can be used to deliver messages to Amazon Kinesis Data Firehose, enabling you to stream data to destinations such as Amazon S3, Amazon Redshift, and Amazon Elasticsearch Service.
7. Amazon EventBridge: SNS can be integrated with Amazon EventBridge to route messages to specific event buses and targets based on defined rules, allowing you to build event-driven architectures and automate workflows.
8. Amazon SES (Simple Email Service): SNS can be used to send email notifications through Amazon SES, allowing you to deliver messages to email addresses and manage email subscriptions.
9. Mobile Push Notification Services: SNS can deliver messages as mobile push notifications to platforms such as Apple Push Notification Service (APNS), Google Cloud Messaging (GCM)/Firebase Cloud Messaging (FCM), and Amazon Device Messaging (ADM), enabling you to send notifications to mobile apps and devices.
By configuring AWS SNS with these services, you can leverage its capabilities to send notifications, trigger actions, and facilitate communication across different AWS services and external endpoints.

Q.8 What is 10DLC in AWS? 
ANS: 10DLC (10 Digit Long Code) is a messaging solution in AWS that allows businesses to send Application-to-Person (A2P) messages using a standard 10-digit long code phone number. 
     This solution is designed to improve the deliverability and reliability of A2P messaging, particularly for high-volume use cases such as marketing, notifications, and customer engagement.

Q.9 What are FIFO topics on SNS?
ANS:

Q.10 What is SNS Mobile Push?
ANS:
Q.11 On which delivery method do we use and configure the subscription?
ANS:

